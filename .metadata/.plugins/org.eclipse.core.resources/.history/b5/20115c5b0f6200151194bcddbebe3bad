package canibales;

import java.util.Random;
import java.util.concurrent.Semaphore;

public class Olla {

	int capacidadMax;
	int misioneros;
	
	Semaphore candadoCocinero;
	Semaphore candadoCanibal;
	
	public Olla(int capacidadMax){
		this.capacidadMax = capacidadMax;
		misioneros = 0;
		candadoCocinero = new Semaphore(1);
		candadoCanibal = new Semaphore(0);
	}
	
	public boolean llenarOlla() {
		try {
			candadoCocinero.acquire();
		} catch (InterruptedException e) {
			System.out.println("Cocinero en espera interrumpido");
			return false;
		}
		while(misioneros < capacidadMax){
			System.out.println("Despiezando...");
			esperar(500);
			System.out.println("Metiendo en olla...");
			misioneros++;
			esperar(500);
			System.out.println("Herviendo.");
			esperar(500);
			System.out.println("Herviendo..");
			esperar(500);
			System.out.println("Herviendo...");
			esperar(500);
		}
		System.out.println("Olla llena");
		esperar(1000);
		candadoCanibal.release();
		
		return true;
	}
	
	public boolean comer(){
		try {
			candadoCanibal.acquire();
		} catch (InterruptedException e) {
			System.out.println("Canibal en espera interrumpido");
			return false;
		}
		System.out.println("Sirviendo...");
		esperar(500);
		System.out.println("Comiendo.");
		esperar(500);
		System.out.println("Comiendo..");
		esperar(500);
		System.out.println("Comiendo...");
		misioneros--;
		esperar(500);
		System.out.println("Recogiendo...");
		esperar(500);
		if(misioneros > 0) candadoCanibal.release();
		else candadoCocinero.release();
		
		return true;
	}
	
	public void esperar(int tiempo){
		Random random = new Random();
		try {
			Thread.sleep(tiempo);
		} catch (InterruptedException e) {
			
		}
	}
}
