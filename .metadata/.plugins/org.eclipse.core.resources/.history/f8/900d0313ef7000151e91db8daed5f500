package barreraCiclica;

import java.util.concurrent.Semaphore;


public class MiBarrera {
	
	Semaphore barreraEntrada, barreraSalida;
	int contador;
	int numHilos;
	Semaphore candado;
	Runnable runable;
	
	public  MiBarrera(int numHilos, Runnable runnable){
		barreraEntrada = new Semaphore(0);
		barreraSalida = new Semaphore(0);
		candado = new Semaphore (1);
		contador = 0;
		this.numHilos = numHilos;
		this.runable = runnable;
	}
	
	public void esperar(){
		try {
			candado.acquire();
		
			contador++;
			
			if (contador == numHilos){
				if (runable !=null) runable.run();
				barreraSalida.release(numHilos);
				
			}
			candado.release();
			barreraSalida.acquire();
			
			candado.acquire();
			contador --;
			
			if (contador == 0){
				barreraEntrada.release(numHilos);
			}
			candado.release();
			barreraEntrada.acquire();
			
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	
	
	
	
	
	
	
	
	
	
	
	
}
