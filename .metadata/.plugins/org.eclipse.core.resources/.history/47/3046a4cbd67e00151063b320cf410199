package itv;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class ITV {

	int aforoAparcamiento;
	int aforoCochera;
	
	boolean abierto;
	
	Object aparcamiento;
	
	Lock candadoAparcamiento;
	Condition colaApCoche;
	Condition colaApOperario;
	
	Lock candadoCochera;
	Condition colaCocheraCoche;
	Condition colaCocheraOperario;
	
	boolean cochesRevisados[];
	int cochesEnCochera[];
	int cochesEnAparcamiento[];
	
	
	public ITV(int aforoAparcamiento, int aforoCochera) {
		super();
		this.aforoAparcamiento = aforoAparcamiento;
		this.aforoCochera = aforoCochera;
		
		abierto = true;
		
		candadoAparcamiento = new ReentrantLock();
		colaApCoche = candadoAparcamiento.newCondition();
		colaApOperario = candadoAparcamiento.newCondition();
		
		candadoCochera = new ReentrantLock();
		colaCocheraCoche = candadoCochera.newCondition();
		colaCocheraOperario = candadoCochera.newCondition();
		
		cochesRevisados = new boolean[aforoCochera];
		cochesEnCochera = new int[aforoCochera];
		cochesEnAparcamiento = new int[aforoAparcamiento];
		
		for (int i = 0; i < aforoCochera; i++) {
			cochesRevisados[i] = true;
			cochesEnCochera[i] = -1;
		}
	}

	public boolean abierto() {
		return abierto;
	}
	
	public void cerrar() {
		abierto = false;
	}

	public int esperarCoche() {
		while(!cochesAparcamiento()) {
			try {
				colaApOperario.await();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private boolean cochesAparcamiento() {
		int posicion;
		
		candadoAparcamiento.lock();
		
		for (int i = 0; i < aforoCochera; i++) {
			if (cochesEnCochera[i])
		}
		if (numCochesCochera > 0) {
			numCochesCochera--;
			candadoAparcamiento.unlock();
			return true;
		} else {
			candadoAparcamiento.unlock();
			return false;
		}
	}

	public void revisarCoche(int idOperario, int idCoche, int posicion) {
		candadoCochera.lock();
		if (!cochesRevisados[posicion]) System.err.println("Operario " + idOperario + " encuentra coche " + idCoche + " en cochera " + posicion + " revisado");
		System.out.println("Operario " + idOperario + " revisa coche " + idCoche + " en cochera " + posicion);
	}

	public int entrarEnAparcamiento(int id) {
		int posicion;
		
		if((posicion = aparcamientoLibre()) != -1){
			System.out.println("Coche " + id + " no encuentra sitio en aparcamiento y se va");
			return posicion;
		} else {
			System.out.println("Coche " + id + " encuentra sitio en aparcamiento y aparca");
			return posicion;
		}
	}

	private int aparcamientoLibre() {

		candadoAparcamiento.lock();
		
		for (int i = 0; i < aforoAparcamiento; i++) {
			if (cochesEnAparcamiento[i] == -1) {
				candadoAparcamiento.unlock();
				return i;
			}
		}
		candadoAparcamiento.unlock();
		return -1;
	}

	public void entrarEnCochera(int id) {
		int posicion;
		
		while((posicion = cocheraLibre()) != -1) {
			try {
				aparcamiento.wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private int cocheraLibre() {
		
		candadoCochera.lock();
		
		for (int i = 0; i < aforoCochera; i++) {
			if (cochesEnCochera[i] == -1) {
				candadoCochera.unlock();
				return i;
			}
		}
		candadoCochera.unlock();
		return -1;
	}

	public void salir(int id) {
		// TODO Auto-generated method stub
		
	}

	public int encontrarCoche() {
		// TODO Auto-generated method stub
		return 0;
	}

}
