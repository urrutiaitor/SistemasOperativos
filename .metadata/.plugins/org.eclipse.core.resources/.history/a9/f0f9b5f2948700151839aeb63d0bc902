package inicial;

import java.util.concurrent.Semaphore;
import java.util.concurrent.locks.Condition;

public class Mesa {

	int numFilosofos;
	
	Semaphore candado;
	Semaphore candadoPalillo[];
	
	public Mesa(int numFilosofos) {
		this.numFilosofos = numFilosofos;
		candado = new Semaphore(1);
		candadoPalillo = new Semaphore[numFilosofos];
		for (int i = 0; i < numFilosofos; i++) {
			candadoPalillo[i] = new Semaphore(1);
		}
	}

	public void cogerPalilloIzq(int posicionPalilloIzq) {
		try {
			candadoPalillo[posicionPalilloIzq].acquire();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void cogerPalilloDer(int posicionPalilloDer) {
		try {
			candadoPalillo[posicionPalilloDer].acquire();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void comer(int posicion) {
		System.out.println("Filosofo " + posicion + " come");
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	public void dejarPalilloIzq(int posicionPalilloIzq) {
		candadoPalillo[posicionPalilloIzq].release();
	}

	public void dejarPalilloDer(int posicionPalilloDer) {
		candadoPalillo[posicionPalilloDer].release();
	}

	public int getNumFilosofos() {
		return numFilosofos;
	}

}
